package com.hzg.tools;

import com.google.gson.reflect.TypeToken;
import com.hzg.afterSaleService.ReturnProduct;
import com.hzg.afterSaleService.ReturnProductDetail;
import com.hzg.afterSaleService.ReturnProductDetailProduct;
import com.hzg.customer.Customer;
import com.hzg.erp.*;
import com.hzg.finance.DocType;
import com.hzg.finance.FinanceDao;
import com.hzg.finance.VoucherItemSource;
import com.hzg.finance.VoucherItemSourceDetail;
import com.hzg.order.Order;
import com.hzg.order.OrderBook;
import com.hzg.order.OrderDetail;
import com.hzg.order.OrderDetailProduct;
import com.hzg.pay.Account;
import com.hzg.pay.Pay;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Copyright © 2012-2025 云南红掌柜珠宝有限公司 版权所有
 * 文件名: FinanceUtil.java
 * 类的详细说明
 *
 * @author yuanyun
 * @version 1.00
 * @Date 2018/1/5
 */
@Component
public class FinanceUtil {

    private SimpleDateFormat dayFormat = new SimpleDateFormat("yyyy/MM/dd");

    @Autowired
    private FinanceDao financeDao;

    @Autowired
    private Writer writer;

    @Autowired
    private DateUtil dateUtil;

    /**
     * 每天晚上12点查询是否有各种单据生成，有的话获取需要数据插入到凭证来源表里
     */
    @Transactional
    @Scheduled(cron = "0 35 11 * * ?")
    public void scanDoc(){
        String result ="";
        DocType docType = new DocType();
        Map<String, String> queryParameters = null;
        String date1 = dayFormat.format(dateUtil.getForwardDay(10));
        String date2 = dayFormat.format(new Date(System.currentTimeMillis()));
        String date = date1 + " - " + date2;

        String json = "{\"inputDate\":\""+date+"\"}";
        try {
            queryParameters = writer.gson.fromJson(json, new TypeToken<Map<String, String>>(){}.getType());
        } catch (Exception e){
            e.getMessage();
        }
        //查询采购单
        List<Purchase> purchases = financeDao.complexQuery(Purchase.class, queryParameters, 0, -1);
        if (purchases != null && !purchases.isEmpty()){
            PurchaseDetail purchaseDetail = new PurchaseDetail();
            for (Purchase purchase:purchases) {
                if (purchase != null) {
                    if (purchase.getState() == 0){
                        VoucherItemSource voucherItemSource = new VoucherItemSource();
                        // 设置制单人
                        voucherItemSource.setChartMaker(purchase.getInputer());
                        // 设置单据日期
                        voucherItemSource.setDate(purchase.getInputDate());
                        // 设置单据类型
                        docType.setId(1);
                        voucherItemSource.setDocType(docType);
                        // 设置业务类型
                        Integer type = purchase.getType();
                        if (type == 0) {
                            voucherItemSource.setBusinessType("正常采购");
                        } else if (type == 1) {
                            voucherItemSource.setBusinessType("临时采购");
                        } else if (type == 2) {
                            voucherItemSource.setBusinessType("应急采购");
                        } else if (type == 3) {
                            voucherItemSource.setBusinessType("现金采购");
                        } else if (type == 4) {
                            voucherItemSource.setBusinessType("押金采购");
                        }
                        // 设置单据编号
                        voucherItemSource.setDocNo(purchase.getNo());
                        // 设置往来单位，对于采购单来说往来单位就是供应商
                        Set<PurchaseDetail> details = purchase.getDetails();
                        Iterator<PurchaseDetail> iterator = details.iterator();
                        while (iterator.hasNext()){
                            purchaseDetail = iterator.next();
                            break;
                        }
                        Supplier supplier = (Supplier)financeDao.queryById(purchaseDetail.getSupplier().getId(), Supplier.class);
                        voucherItemSource.setContactUnit(supplier.getName());
                        // 设置金额和备注
                        voucherItemSource.setAmount(purchase.getAmount());
                        voucherItemSource.setRemark(purchase.getDescribes());
                        result = financeDao.save(voucherItemSource);
                        if (result == "success"){
                            VoucherItemSourceDetail voucherItemSourceDetail = new VoucherItemSourceDetail();
                            voucherItemSourceDetail.setVoucherItemSource(voucherItemSource);
                            PurchaseDetailProduct purchaseDetailProduct = new PurchaseDetailProduct();
                            for (PurchaseDetail purchaseDetail1 : details){
                                purchaseDetailProduct.setPurchaseDetail(purchaseDetail1);
                                List<PurchaseDetailProduct> purchaseDetailProducts = financeDao.query(purchaseDetailProduct);
                                Iterator<PurchaseDetailProduct> iterator1 = purchaseDetailProducts.iterator();
                                while (iterator1.hasNext()){
                                    purchaseDetailProduct = iterator1.next();
                                    break;
                                }
                                // 采购明细与产品关联id
                                Integer id = purchaseDetailProduct.getId();
                                // 采购明细对应商品的商品类型
                                ProductType productType = ((PurchaseDetailProduct)financeDao.queryById(id,PurchaseDetailProduct.class)).getProduct().getType();
                                voucherItemSourceDetail.setEntity("productType");
                                voucherItemSourceDetail.setEntityId(productType.getId());
                                financeDao.save(voucherItemSourceDetail);
                            }

                            // 查询采购单的支付记录
                            Pay pay = new Pay();
                            pay.setEntity("purchase");
                            pay.setEntityId(purchase.getId());
                            List<Pay> pays = financeDao.query(pay);
                            if (pays != null && !pays.isEmpty()){
                                for (Pay pay1 : pays){
                                    voucherItemSourceDetail.setEntity("payType");
                                    // 获取支付方式
                                    Integer payType = pay1.getPayType();
                                    voucherItemSourceDetail.setEntityId(payType);
                                    financeDao.save(voucherItemSourceDetail);
                                    // 获取付款账号
                                    String payAccount = pay1.getPayAccount();
                                    // 查询付款账号所对应的账户
                                    Account account = new Account();
                                    account.setAccount(payAccount);
                                    account = (Account) financeDao.query(account).get(0);
                                    voucherItemSourceDetail.setEntity("account");
                                    voucherItemSourceDetail.setEntityId(account.getId());
                                    financeDao.save(voucherItemSourceDetail);
                                }
                            }
                        }
                    } else {
                        continue;
                    }
                }
            }
        }

        //查询入库单和出库单
        List<StockInOut> stockInOuts = financeDao.complexQuery(StockInOut.class, queryParameters, 0, -1);
        if (stockInOuts != null && !stockInOuts.isEmpty()){
            for (StockInOut stockInOut:stockInOuts) {
                if (stockInOut != null) {
                    if (stockInOut.getState() == 1){
                        VoucherItemSource voucherItemSource = new VoucherItemSource();
                        // 设置制单人
                        voucherItemSource.setChartMaker(stockInOut.getInputer());
                        //设置单据日期
                        voucherItemSource.setDate(stockInOut.getInputDate());
                        // 设置出库和入库仓库
                        voucherItemSource.setWarehouse(stockInOut.getWarehouse());
                        // 设置单据类型
                        Integer type = stockInOut.getType();
                        if (type <= 2 || type == 4 || type == 16){
                            docType.setId(2);
                        } else if (type ==11 || type == 14 || type == 15 || type == 51){
                            docType.setId(4);
                        } else if (type == 3 || type == 5){
                            docType.setId(7);
                        } else if (type == 12){
                            docType.setId(8);
                        } else {
                            continue;
                        }
                        voucherItemSource.setDocType(docType);
                        // 设置业务类型
                        if (type == 0) {
                            voucherItemSource.setBusinessType("现金入库");
                        } else if (type == 1) {
                            voucherItemSource.setBusinessType("代销入库");
                        } else if (type == 2) {
                            voucherItemSource.setBusinessType("增量入库");
                        } else if (type == 3) {
                            voucherItemSource.setBusinessType("加工入库");
                        } else if (type == 4) {
                            voucherItemSource.setBusinessType("押金入库");
                        } else if (type == 5) {
                            voucherItemSource.setBusinessType("修补入库");
                        } else if (type == 51) {
                            voucherItemSource.setBusinessType("销售退货");
                        } else if (type == 6) {
                            voucherItemSource.setBusinessType("调仓入库");
                        } else if (type == 11) {
                            voucherItemSource.setBusinessType("系统自动出库");
                        } else if (type == 12) {
                            voucherItemSource.setBusinessType("报损出库");
                        } else if (type == 13) {
                            voucherItemSource.setBusinessType("调仓出库");
                        } else if (type == 14) {
                            voucherItemSource.setBusinessType("内购出库");
                        } else if (type == 15) {
                            voucherItemSource.setBusinessType("正常出库");
                        } else if (type == 16){
                            voucherItemSource.setBusinessType("采购退货");
                        }
                        // 设置单据编号
                        voucherItemSource.setDocNo(stockInOut.getNo());
                        Float amount = 0.0f;
                        Set<StockInOutDetail> stockInOutDetails = stockInOut.getDetails();
                        StockInOutDetailProduct stockInOutDetailProduct = null;
                        if (type == 4){
                            amount += stockInOut.getDeposit().getAmount();
                        } else {
                            Float unitPrice = 0.0f;
                            for (StockInOutDetail stockInOutDetail : stockInOutDetails) {
                                stockInOutDetailProduct.setStockInOutDetail(stockInOutDetail);
                                List<StockInOutDetailProduct> stockInOutDetailProducts = financeDao.query(stockInOutDetailProduct);
                                for (StockInOutDetailProduct stockInOutDetailProduct1 : stockInOutDetailProducts) {
                                    Integer id = stockInOutDetailProduct1.getId();
                                    stockInOutDetailProduct1 = (StockInOutDetailProduct) financeDao.queryById(id, StockInOutDetailProduct.class);
                                    unitPrice = stockInOutDetailProduct1.getProduct().getUnitPrice();
                                    break;
                                }
                                amount += unitPrice * stockInOutDetail.getQuantity();
                            }
                        }
                        // 设置金额
                        voucherItemSource.setAmount(amount);
                        if (type == 3 || type == 5){
                            // 设置扩展字段，这里是加工费
                            Float processBill = stockInOut.getProcessRepair().getExpense();
                            voucherItemSource.setExtend(processBill.toString());
                        }
                        // 设置备注
                        voucherItemSource.setRemark(stockInOut.getDescribes());
                        result = financeDao.save(voucherItemSource);
                        if (result == "success"){
                            VoucherItemSourceDetail voucherItemSourceDetail = new VoucherItemSourceDetail();
                            voucherItemSourceDetail.setVoucherItemSource(voucherItemSource);
                            for (StockInOutDetail stockInOutDetail : stockInOutDetails){
                                Set<StockInOutDetailProduct> stockInOutDetailProducts = stockInOutDetail.getStockInOutDetailProducts();
                                Iterator<StockInOutDetailProduct> iterator = stockInOutDetailProducts.iterator();
                                while (iterator.hasNext()){
                                    stockInOutDetailProduct = iterator.next();
                                    break;
                                }
                                // 出入库明细与产品关联id
                                Integer id = stockInOutDetailProduct.getId();
                                // 出入库明细对应商品的商品类型
                                ProductType productType = ((StockInOutDetailProduct)financeDao.queryById(id,StockInOutDetailProduct.class)).getProduct().getType();
                                voucherItemSourceDetail.setEntity("productType");
                                voucherItemSourceDetail.setEntityId(productType.getId());
                                financeDao.save(voucherItemSourceDetail);
                            }
                        }
                    } else {
                        continue;
                    }
                }
            }
        }

        //查询订单
        String json1 = "{\"date\":\""+date+"\"}";
        try {
            queryParameters = writer.gson.fromJson(json1, new TypeToken<Map<String, String>>(){}.getType());
        } catch (Exception e){
            e.getMessage();
        }
        List<Order> orders = financeDao.complexQuery(Order.class, queryParameters, 0, -1);
        if (orders != null && !orders.isEmpty()){
            for (Order order:orders) {
                if (order != null) {
                    if (order.getState() == 1){
                        VoucherItemSource voucherItemSource = new VoucherItemSource();
                        // 设置制单人
                        voucherItemSource.setChartMaker(order.getSaler());
                        // 设置单据日期
                        voucherItemSource.setDate(order.getDate());
                        // 设置单据类型
                        docType.setId(3);
                        voucherItemSource.setDocType(docType);
                        // 设置业务类型
                        Integer type = order.getType();
                        if (type == 0) {
                            voucherItemSource.setBusinessType("自助下单");
                        } else if (type == 1) {
                            voucherItemSource.setBusinessType("代下单");
                        } else if (type == 2) {
                            voucherItemSource.setBusinessType("私人订制");
                        } else if (type == 3) {
                            voucherItemSource.setBusinessType("预定");
                        } else if (type == 4) {
                            voucherItemSource.setBusinessType("代下单加工");
                        }
                        // 设置单据编号
                        voucherItemSource.setDocNo(order.getNo());
                        // 设置往来单位，对于订单来说往来单位就是客户
                        Integer id = order.getUser().getCustomer().getId();
                        Customer customer = (Customer) financeDao.queryById(id, Customer.class);
                        voucherItemSource.setContactUnit(customer.getName());
                        // 设置金额和备注
                        voucherItemSource.setAmount(order.getAmount());
                        voucherItemSource.setRemark(order.getDescribes());
                        result = financeDao.save(voucherItemSource);
                        if (result == "success"){
                            VoucherItemSourceDetail voucherItemSourceDetail = new VoucherItemSourceDetail();
                            voucherItemSourceDetail.setVoucherItemSource(voucherItemSource);
                            OrderDetailProduct orderDetailProduct = new OrderDetailProduct();
                            Set<OrderDetail> orderDetails = order.getDetails();
                            for (OrderDetail orderDetail : orderDetails){
                                orderDetailProduct.setOrderDetail(orderDetail);
                                List<OrderDetailProduct> orderDetailProducts = financeDao.query(orderDetailProduct);
                                Iterator<OrderDetailProduct> iterator = orderDetailProducts.iterator();
                                while (iterator.hasNext()){
                                    orderDetailProduct = iterator.next();
                                    break;
                                }
                                // 订单明细与产品关联id
                                Integer id1 = orderDetailProduct.getId();
                                // 订单明细对应商品的商品类型
                                ProductType productType = ((OrderDetailProduct)financeDao.queryById(id1,OrderDetailProduct.class)).getProduct().getType();
                                voucherItemSourceDetail.setEntity("productType");
                                voucherItemSourceDetail.setEntityId(productType.getId());
                                financeDao.save(voucherItemSourceDetail);
                            }

                            // 查询订单的支付记录
                            Pay pay = new Pay();
                            pay.setEntity("order");
                            pay.setEntityId(order.getId());
                            List<Pay> pays = financeDao.query(pay);
                            if (pays != null && !pays.isEmpty()){
                                for (Pay pay1 : pays){
                                    voucherItemSourceDetail.setEntity("payType");
                                    // 获取支付方式
                                    Integer payType = pay1.getPayType();
                                    voucherItemSourceDetail.setEntityId(payType);
                                    financeDao.save(voucherItemSourceDetail);
                                    // 获取收款账号
                                    String receiptAccount = pay1.getPayAccount();
                                    // 查询收款账号所对应的账户
                                    Account account = new Account();
                                    account.setAccount(receiptAccount);
                                    account = (Account) financeDao.query(account).get(0);
                                    voucherItemSourceDetail.setEntity("account");
                                    voucherItemSourceDetail.setEntityId(account.getId());
                                    financeDao.save(voucherItemSourceDetail);
                                }
                            }
                        }
                    } else {
                        continue;
                    }
                }
            }
        }

        // 查询付款单和收款单
        String json2 = "{\"payDate\":\""+date+"\"}";
        try {
            queryParameters = writer.gson.fromJson(json2, new TypeToken<Map<String, String>>(){}.getType());
        } catch (Exception e){
            e.getMessage();
        }
        List<Pay> pays = financeDao.complexQuery(Pay.class, queryParameters, 0, -1);
        if (pays != null && !pays.isEmpty()){
            Purchase purchase = new Purchase();
            PurchaseBook purchaseBook = new PurchaseBook();
            PurchaseDetail purchaseDetail = new PurchaseDetail();
            Order order = new Order();
            OrderBook orderBook = new OrderBook();
            for (Pay pay:pays) {
                if (pay != null) {
                    if (pay.getState() == 1){
                        VoucherItemSource voucherItemSource = new VoucherItemSource();
                        // 设置单据日期
                        voucherItemSource.setDate(pay.getPayDate());
                        String entity = pay.getEntity();
                        Integer id = pay.getEntityId();
                        if (entity.equals("purchase")){
                            // 设置单据类型为付款单
                            docType.setId(5);
                            voucherItemSource.setDocType(docType);
                            purchase.setId(id);
                            purchaseBook.setPurchase(purchase);
                            List<PurchaseBook> purchaseBooks = financeDao.query(purchaseBook);
                            if (purchaseBooks != null && !purchaseBooks.isEmpty()){
                                voucherItemSource.setBusinessType("预付款");
                            } else {
                                voucherItemSource.setBusinessType("普通付款");
                            }
                            voucherItemSource.setDocNo(pay.getNo());
                            purchaseDetail.setPurchase(purchase);
                            // 获取供应商的名称
                            String supplier = ((PurchaseDetail)financeDao.query(purchaseDetail).get(0)).getSupplier().getName();
                            voucherItemSource.setContactUnit(supplier);
                            voucherItemSource.setAmount(pay.getAmount());
                            financeDao.save(voucherItemSource);
                        } else {
                            // 设置单据类型为收款单
                            docType.setId(6);
                            voucherItemSource.setDocType(docType);
                            order.setId(id);
                            orderBook.setOrder(order);
                            List<OrderBook> orderBooks = financeDao.query(orderBook);
                            if (orderBooks != null && !orderBooks.isEmpty()){
                                voucherItemSource.setBusinessType("预收款");
                            } else {
                                voucherItemSource.setBusinessType("普通收款");
                            }
                            voucherItemSource.setDocNo(pay.getNo());
                            Customer customer = pay.getUser().getCustomer();
                            // 获取客户的名字
                            String customerName = ((Customer)financeDao.queryById(customer.getId(),Customer.class)).getName();
                            voucherItemSource.setContactUnit(customerName);
                            voucherItemSource.setAmount(pay.getAmount());
                            financeDao.save(voucherItemSource);
                        }
                        if (result == "success"){
                            VoucherItemSourceDetail voucherItemSourceDetail = new VoucherItemSourceDetail();
                            voucherItemSourceDetail.setVoucherItemSource(voucherItemSource);
                            Account account = new Account();
                            if (voucherItemSource.getDocType().getId()==5){
                                // 获取付款账号
                                String payAccount = pay.getPayAccount();
                                account.setAccount(payAccount);
                            } else {
                                // 获取收款账号
                                String receiptAccount = pay.getReceiptAccount();
                                account.setAccount(receiptAccount);
                            }
                            // 查询付款账号或者收款账号所对应的账户
                            account = (Account) financeDao.query(account).get(0);
                            voucherItemSourceDetail.setEntity("account");
                            voucherItemSourceDetail.setEntityId(account.getId());
                            financeDao.save(voucherItemSourceDetail);
                        }
                    } else {
                        continue;
                    }
                }
            }
        }

        // 查询采购退货单和销售退货单
        try {
            queryParameters = writer.gson.fromJson(json1, new TypeToken<Map<String, String>>(){}.getType());
        } catch (Exception e){
            e.getMessage();
        }
        List<ReturnProduct> returnProducts = financeDao.complexQuery(ReturnProduct.class, queryParameters, 0, -1);
        if (returnProducts != null && !returnProducts.isEmpty()){
            for (ReturnProduct returnProduct:returnProducts) {
                if (returnProduct != null) {
                    Integer state = returnProduct.getState();
                    if (state == 5 || state == 1){
                        VoucherItemSource voucherItemSource = new VoucherItemSource();
                        // 设置单据日期
                        voucherItemSource.setDate(returnProduct.getDate());
                        // 设置单据编号
                        voucherItemSource.setDocNo(returnProduct.getNo());
                        Set<ReturnProductDetail> returnProductDetails = returnProduct.getDetails();
                        ReturnProductDetailProduct returnProductDetailProduct = null;
                        if (returnProduct.getEntity().equals(FinanceConstant.returnproduct_purchase)){
                            // 设置单据类型
                            docType.setId(1);
                            // 设置业务类型
                            voucherItemSource.setBusinessType("采购退货");
                            // 设置往来单位，对于采购退货来说就是供应商
                            Iterator<ReturnProductDetail> iterator = returnProductDetails.iterator();
                            ReturnProductDetail returnProductDetail = null;
                            while (iterator.hasNext()){
                                returnProductDetail = iterator.next();
                                break;
                            }
                            returnProductDetailProduct.setReturnProductDetail(returnProductDetail);
                            List<ReturnProductDetailProduct> returnProductDetailProducts = financeDao.query(returnProductDetailProduct);
                            Iterator<ReturnProductDetailProduct> iterator1 = returnProductDetailProducts.iterator();
                            while (iterator1.hasNext()){
                                returnProductDetailProduct = (ReturnProductDetailProduct) financeDao.queryById(iterator1.next().getId(),ReturnProductDetailProduct.class);
                                break;
                            }
                            Supplier supplier = (Supplier)financeDao.queryById(returnProductDetailProduct.getProduct().getSupplier().getId(),Supplier.class);
                            voucherItemSource.setContactUnit(supplier.getName());
                        } else {
                            docType.setId(3);
                            // 设置业务类型
                            voucherItemSource.setBusinessType("销售退货");
                            // 设置往来单位，对于销售退货来说就是客户
                            Customer customer = (Customer)financeDao.queryById(returnProduct.getUser().getCustomer().getId(),Customer.class);
                            voucherItemSource.setContactUnit(customer.getName());
                        }
                        // 设置金额和备注
                        voucherItemSource.setAmount(returnProduct.getAmount());
                        voucherItemSource.setRemark(returnProduct.getReason());
                        result = financeDao.save(voucherItemSource);
                        if (result == "success"){
                            VoucherItemSourceDetail voucherItemSourceDetail = new VoucherItemSourceDetail();
                            voucherItemSourceDetail.setVoucherItemSource(voucherItemSource);
                            for (ReturnProductDetail returnProductDetail : returnProductDetails){
                                returnProductDetailProduct.setReturnProductDetail(returnProductDetail);
                                List<ReturnProductDetailProduct> returnProductDetailProducts = financeDao.query(returnProductDetailProduct);
                                Iterator<ReturnProductDetailProduct> iterator1 = returnProductDetailProducts.iterator();
                                while (iterator1.hasNext()){
                                    returnProductDetailProduct = iterator1.next();
                                    break;
                                }
                                // 采购退货明细与产品关联id
                                Integer id = returnProductDetailProduct.getId();
                                // 采购退货明细对应商品的商品类型
                                ProductType productType = ((ReturnProductDetailProduct)financeDao.queryById(id,ReturnProductDetailProduct.class)).getProduct().getType();
                                voucherItemSourceDetail.setEntity("productType");
                                voucherItemSourceDetail.setEntityId(productType.getId());
                                financeDao.save(voucherItemSourceDetail);
                            }

                            // 查询采购退货单和销售退货单的支付记录
                            Pay pay = new Pay();
                            pay.setEntity("returnProduct");
                            pay.setEntityId(returnProduct.getId());
                            pays = financeDao.query(pay);
                            if (pays !=null && !pays.isEmpty()){
                                for (Pay pay1 : pays){
                                    voucherItemSourceDetail.setEntity("payType");
                                    // 获取支付方式
                                    Integer payType = pay1.getPayType();
                                    voucherItemSourceDetail.setEntityId(payType);
                                    financeDao.save(voucherItemSourceDetail);
                                    Account account = new Account();
                                    if (returnProduct.getEntity().equals(FinanceConstant.returnproduct_purchase)){
                                        //获取收款账号
                                        String receiptAccount = pay.getReceiptAccount();
                                        account.setAccount(receiptAccount);
                                    } else {
                                        // 获取付款账号
                                        String payAccount = pay1.getPayAccount();
                                        account.setAccount(payAccount);
                                    }
                                    // 查询付款账号所对应的账户
                                    account = (Account) financeDao.query(account).get(0);
                                    voucherItemSourceDetail.setEntity("account");
                                    voucherItemSourceDetail.setEntityId(account.getId());
                                    financeDao.save(voucherItemSourceDetail);
                                }
                            }
                        }
                    } else {
                        continue;
                    }
                }
            }
        }
    }
}