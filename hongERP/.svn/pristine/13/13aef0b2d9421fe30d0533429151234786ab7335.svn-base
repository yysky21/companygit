package com.hzg.finance;

import com.hzg.sys.*;
import com.hzg.tools.*;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletResponse;
import java.math.BigInteger;
import java.util.List;
import java.util.Set;

/**
 * Copyright © 2012-2025 云南红掌柜珠宝有限公司 版权所有
 * 文件名: FinanceController.java
 *
 * @author yuanyun
 * @version 1.00
 * @Date 2017/11/25
 */
@Controller
@RequestMapping("/finance")
public class ProvideFinanceController {

    Logger logger = Logger.getLogger(ProvideFinanceController.class);

    @Autowired
    private FinanceDao financeDao;

    @Autowired
    private FinanceService financeService;

    @Autowired
    private Writer writer;

    @Autowired
    private Transcation transcation;

    /**
     * 保存实体
     * @param response
     * @param entity
     * @param json
     */
    @Transactional
    @PostMapping("/save")
    public void save(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("save start, parameter:" + entity + ":" + json);

        String result = CommonConstant.fail;

        try {
            if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
                Voucher voucher = writer.gson.fromJson(json, Voucher.class);
                // 保存凭证
                result += financeDao.save(voucher);
                // 保存凭证明细
                result += financeService.saveVoucherDetail(voucher);

                /**
                 * 提醒审核人员审核凭证
                 */
                String auditEntity = AuditFlowConstant.business_voucherAudit;
                result += financeService.launchAuditFlow(auditEntity, voucher.getId(), "请审核凭证编号为" +voucher.getNo()+"的凭证",
                        "请审核凭证编号为" +voucher.getNo()+"的凭证" ,voucher.getChartMaker());
            }
        } catch (Exception e) {
            e.printStackTrace();
            result += CommonConstant.fail;
        } finally {
            result = transcation.dealResult(result);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("save end, result:" + result);
    }


    @RequestMapping(value = "/query", method = {RequestMethod.GET, RequestMethod.POST})
    public void query(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("query start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
            Voucher voucher = writer.gson.fromJson(json, Voucher.class);
             List<Voucher> vouchers = financeDao.query(voucher);
            for (Voucher voucher1 : vouchers) {
                Set<VoucherDetail> voucherDetails = voucher1.getDetails();
                for (VoucherDetail voucherDetail : voucherDetails){
                    int id = voucherDetail.getVoucherItem().getId();
                    VoucherItem voucherItem = (VoucherItem) financeDao.queryById(id,VoucherItem.class);
                    voucherDetail.setVoucherItem(voucherItem);
                }
            }
            writer.writeObjectToJson(response, vouchers);
        }

        logger.info("query end");
    }

    @RequestMapping(value = "/suggest", method = {RequestMethod.GET, RequestMethod.POST})
    public void suggest(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("suggest start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())) {
            VoucherCategory voucherCategory = writer.gson.fromJson(json, VoucherCategory.class);
            writer.writeObjectToJson(response, financeDao.suggest(voucherCategory, null));

        } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
            Subject subject = writer.gson.fromJson(json, Subject.class);
            writer.writeObjectToJson(response, financeDao.suggest(subject, null));

        } else if (entity.equalsIgnoreCase(User.class.getSimpleName())){
            User user = writer.gson.fromJson(json, User.class);
            writer.writeObjectToJson(response, financeDao.suggest(user, null));
        }
        logger.info("suggest end");
    }

    @RequestMapping(value = "/getNo", method = {RequestMethod.GET, RequestMethod.POST})
    public void obtainNo(HttpServletResponse response){
        logger.info("getNo start" );
        writer.writeStringToJson(response, "{\"" + FinanceConstant.no + "\":\"" + financeDao.getNo() + "\"}");
        logger.info("getNo end");
    }

    @RequestMapping(value = "/complexQuery", method = {RequestMethod.GET, RequestMethod.POST})
    public void complexQuery(HttpServletResponse response, String entity, @RequestBody String json, int position, int rowNum){
        logger.info("complexQuery start, parameter:" + entity + ":" + json + "," + position + "," + rowNum);

        if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
            writer.writeObjectToJson(response, financeService.privateQuery(entity, json, position, rowNum));
        }

        logger.info("complexQuery end");
    }

    /**
     * 查询条件限制下的记录数
     * @param response
     * @param entity
     * @param json
     */
    @RequestMapping(value = "/recordsSum", method = {RequestMethod.GET, RequestMethod.POST})
    public void recordsSum(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("recordsSum start, parameter:" + entity + ":" + json);
        BigInteger recordsSum = new BigInteger("-1");

        if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
            recordsSum = financeService.privateRecordNum(entity, json);

        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.recordsSum + "\":" + recordsSum + "}");

        logger.info("recordsSum end");
    }

}
