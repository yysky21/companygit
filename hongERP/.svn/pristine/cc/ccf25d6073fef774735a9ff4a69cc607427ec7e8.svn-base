package com.hzg.customer;

import com.google.gson.reflect.TypeToken;
import com.hzg.base.Dao;
import com.hzg.tools.*;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletResponse;
import java.lang.reflect.Field;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.*;

/**
 * Copyright © 2012-2025 云南红掌柜珠宝有限公司 版权所有
 * 文件名: CustomerController.java
 *
 * @author smjie
 * @version 1.00
 * @Date 2017/8/15
 */
@Controller
@RequestMapping("/customer")
public class CustomerController {

    Logger logger = Logger.getLogger(CustomerController.class);

    @Autowired
    private Dao dao;

    @Autowired
    private SmsClient smsClient;

    @Autowired
    private Writer writer;

    @Autowired
    private SignInUtil signInUtil;

    @Autowired
    private Transcation transcation;

    @Autowired
    private DateUtil dateUtil;

    /**
     * 保存实体
     * @param response
     * @param entity
     * @param json
     */
    @Transactional
    @PostMapping("/save")
    public void save(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("save start, parameter:" + entity + ":" + json);

        String result = CommonConstant.fail;
        Timestamp inputDate = dateUtil.getSecondCurrentTimestamp();

        try {
            /**
             * 客户、用户注册要验证短信验证码
             */
            Map<String, Object> saveData = writer.gson.fromJson(json, new TypeToken<Map<String, Object>>() {}.getType());
            String validateCode = saveData.get(SmsConstant.validateCode).toString();
            String dbValidateCode = smsClient.getValidateCode(saveData.get(SmsConstant.phone).toString(), saveData.get(SmsConstant.validateCodeKey).toString());

            if (dbValidateCode != null && validateCode.equals(dbValidateCode)) {
                /**
                 * 客户注册
                 */
                if (entity.equalsIgnoreCase(Customer.class.getSimpleName())) {
                    Customer customer = writer.gson.fromJson(json, Customer.class);

                    Degree degree = new Degree();
                    degree.setLoyalty(CustomerConstant.customer_init_loyalty);
                    degree.setCredit(CustomerConstant.customer_init_credit);
                    degree.setLevel(CustomerConstant.customer_level_normal);
                    degree.setSpendAmount(0f);
                    degree.setSpendCount(0);
                    degree.setSpendPoints(0);
                    result += dao.save(degree);

                    customer.setDegree(degree);
                    customer.setInputDate(inputDate);
                    result += dao.save(customer);

                    User user = (User) customer.getUsers().toArray()[0];
                    Customer idCustomer = new Customer();
                    idCustomer.setId(customer.getId());
                    user.setCustomer(idCustomer);
                    result += dao.save(user);

                    /**
                     * 一对多保存时，为一的实体里的子元素 id 为空，重新设置 redis 里为一的实体里的子元素
                     */
                    customer.getUsers().clear();
                    customer.getUsers().add(user);
                    dao.storeToRedis(customer.getClass().getName() + CommonConstant.underline + customer.getId(), customer);

                } else if (entity.equalsIgnoreCase(User.class.getSimpleName())) {
                    User singInUser = (User) dao.getFromRedis((String) dao.getFromRedis(CommonConstant.sessionId + CommonConstant.underline + saveData.get(CommonConstant.sessionId).toString()));

                    User registryUser = writer.gson.fromJson(json, User.class);
                    Customer idCustomer = new Customer();
                    idCustomer.setId(singInUser.getCustomer().getId());
                    registryUser.setCustomer(idCustomer);

                    result += dao.save(registryUser);

                    /**
                     * 多次增加一对多中为一的实体里的子元素，需要重新设置为一的实体到 redis
                     */
                    singInUser.getCustomer().getUsers().add(registryUser);
                    dao.storeToRedis(singInUser.getCustomer().getClass().getName() + CommonConstant.underline + singInUser.getCustomer().getId(), singInUser.getCustomer());
                }

                if (!result.contains(CommonConstant.fail)) {
                    smsClient.delValidateCode(saveData.get(SmsConstant.phone).toString(), saveData.get(SmsConstant.validateCodeKey).toString());
                }

            } else {
                if (dbValidateCode != null) {
                    result += CommonConstant.fail + ",验证码不正确，不能保存信息";

                } else {
                    result += CommonConstant.fail + ",验证码已经过期，请重新获取验证码，来保存信息";
                }
            }

            if (entity.equalsIgnoreCase(Express.class.getSimpleName())) {
                User singInUser = (User) dao.getFromRedis((String) dao.getFromRedis(CommonConstant.sessionId + CommonConstant.underline + saveData.get(CommonConstant.sessionId).toString()));

                Express express = writer.gson.fromJson(json, Express.class);
                Customer idCustomer = new Customer();
                idCustomer.setId(singInUser.getCustomer().getId());
                express.setCustomer(idCustomer);

                result += dao.save(express);

                singInUser.getCustomer().getExpresses().add(express);
                dao.storeToRedis(singInUser.getCustomer().getClass().getName() + CommonConstant.underline + singInUser.getCustomer().getId(), singInUser.getCustomer());
            }

        } catch (Exception e) {
            e.printStackTrace();
            result += CommonConstant.fail;
        } finally {
            result = transcation.dealResult(result);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("save end, result:" + result);
    }

    @Transactional
    @PostMapping("/update")
    public void update(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("update start, parameter:" + entity + ":" + json);

        String result = CommonConstant.fail;

        User signUser = getSignUser(json);

        try {
            if (entity.equalsIgnoreCase(Customer.class.getSimpleName())) {
                Customer customer = writer.gson.fromJson(json, Customer.class);

                if (customer.getId().compareTo(signUser.getCustomer().getId()) == 0) {
                    result += dao.updateById(customer.getId(), customer);
                }

            } else if (entity.equalsIgnoreCase(User.class.getSimpleName())) {
                User user = writer.gson.fromJson(json, User.class);

                if (user.getId().compareTo(signUser.getId()) == 0) {
                    result += dao.updateById(user.getId(), user);
                }

            } else if (entity.equalsIgnoreCase(Express.class.getSimpleName())) {
                Express express = writer.gson.fromJson(json, Express.class);

                Express dbExpress = (Express) dao.queryById(express.getId(), express.getClass());
                if (dbExpress.getCustomer().getId().compareTo(signUser.getCustomer().getId()) == 0) {
                    result += dao.updateById(express.getId(), express);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            result += CommonConstant.fail;
        } finally {
            result = transcation.dealResult(result);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("update end, result:" + result);
    }

    @RequestMapping(value = "/query", method = {RequestMethod.GET, RequestMethod.POST})
    public void query(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("query start, parameter:" + entity + ":" + json);

        User signUser = getSignUser(json);

        if (entity.equalsIgnoreCase(Customer.class.getSimpleName())) {
            writer.writeObjectToJson(response, writer.gson.toJson(dao.queryById(signUser.getCustomer().getId(), signUser.getCustomer().getClass())));

        } else if (entity.equalsIgnoreCase(User.class.getSimpleName())) {
            writer.writeObjectToJson(response, signUser);

        } else if (entity.equalsIgnoreCase(Express.class.getSimpleName())) {
            Express express = writer.gson.fromJson(json, Express.class);
            express.setCustomer(signUser.getCustomer());
            writer.writeObjectToJson(response, dao.query(express));
        }

        logger.info("query end");
    }

    @RequestMapping(value = "/unlimitedQuery", method = {RequestMethod.GET, RequestMethod.POST})
    public void unlimitedQuery(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("unlimitedQuery start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(User.class.getSimpleName())) {
            writer.writeObjectToJson(response, dao.query(writer.gson.fromJson(json, User.class)));

        } else if (entity.equalsIgnoreCase(Express.class.getSimpleName())) {
            writer.writeObjectToJson(response, dao.query(writer.gson.fromJson(json, Express.class)));
        }

        logger.info("unlimitedQuery end");
    }


    @RequestMapping(value = "/suggest", method = {RequestMethod.GET, RequestMethod.POST})
    public void suggest(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("suggest start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(User.class.getSimpleName())) {
            User user = writer.gson.fromJson(json, User.class);
            user.setState(0);

            Field[] limitFields = new Field[1];
            try {
                limitFields[0] = user.getClass().getDeclaredField("state");
            } catch (Exception e) {
                e.printStackTrace();
            }

            List<User> users = dao.suggest(user, limitFields);
            for (User ele : users) {
                ele.setCustomer((Customer) dao.queryById(ele.getCustomer().getId(), ele.getCustomer().getClass()));
            }

            writer.writeObjectToJson(response, users);
        }

        logger.info("suggest end");
    }

    public User getSignUser(String json) {
        Map<String, Object> jsonData = writer.gson.fromJson(json, new TypeToken<Map<String, Object>>(){}.getType());
        User user = (User) dao.getFromRedis((String) dao.getFromRedis(CommonConstant.sessionId +
                CommonConstant.underline + (String) jsonData.get(CommonConstant.sessionId)));

        User signUser = new User();
        signUser.setId(user.getId());
        signUser.setCustomer(user.getCustomer());

        return signUser;
    }

    /**
     * 用户登录
     * @param response
     * @param json
     */
    @RequestMapping(value = "/user/signIn", method = {RequestMethod.GET, RequestMethod.POST})
    public void signIn(HttpServletResponse response, @RequestBody String json) {
        logger.info("signIn start, parameter:" + json);

        String result = CommonConstant.fail;

        Map<String, String> signInInfo = writer.gson.fromJson(json, new TypeToken<Map<String, String>>(){}.getType());
        String username = signInInfo.get(CommonConstant.username);

        long waitTime = signInUtil.userWait(username);
        if (waitTime > 0) {
            result = "请等待" + (waitTime/1000) + "秒后再次登录";
            writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
            return ;
        }

        String salt = (String)dao.getFromRedis(CommonConstant.salt + CommonConstant.underline + signInInfo.get(CommonConstant.sessionId));
        if (salt == null) {
            result = "加密信息丢失，请刷新后再次登录";
            writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
            return ;
        }

        User user = new User(username);
        user.setState(0); //有效用户

        List<User> dbUsers = dao.query(user);
        if (dbUsers.size() == 1) {
            String encryptDbPassword = DigestUtils.md5Hex(dbUsers.get(0).getPassword().toUpperCase() + salt).toUpperCase();

            /**
             * 账号密码正确
             */
            if (encryptDbPassword.equals(signInInfo.get("encryptPassword"))) {
                result = CommonConstant.success;
                signInUtil.removeSignInFailInfo(username);

            } else {
                result = "用户名或密码错误";

                signInUtil.setSignInFailInfo(username);
                long waitSeconds = signInUtil.getWaitSeconds(username);
                if (waitSeconds != 0) {
                    result += "<br/>已<span style='color:#db6a41;padding-left:2px;padding-right:2px'>" +
                             signInUtil.getSignInFailCount(username) +
                             "</span>次登录错误，请等待" + waitSeconds + "秒后再次登录";

                }
            }

        } else if (dbUsers.size() < 1){
           result = "查询不到 " + user.getUsername() + "，或者该用户已注销";

        } else if (dbUsers.size() > 1){
           result = dbUsers.get(0).getUsername() + " 是重名用户，请联系管理员处理";
        }

        /**
         * 用户已经登录
         */
        if (signInUtil.isUserExist(username) && result.equals(CommonConstant.success)) {
            if (signInUtil.getSessionIdByUser(username) != null) {
                if (!signInUtil.getSessionIdByUser(username).equals(signInInfo.get(CommonConstant.sessionId))) {
                    dao.storeToRedis(username + CommonConstant.underline + signInInfo.get(CommonConstant.sessionId), dbUsers.get(0), signInUtil.sessionTime);
                    result = username + "已经登录";
                }
            }
        }

        /**
         * 登录成功,设置用户,该用户权限资源到 redis
         */
        if (result.equals(CommonConstant.success)) {
            dao.storeToRedis(username, dbUsers.get(0), signInUtil.sessionTime);
            signInUtil.setUser(signInInfo.get(CommonConstant.sessionId), username);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("signIn end");
    }


    /**
     * 用户注销
     */
    @RequestMapping(value="/user/signOut")
    public void signOut(HttpServletResponse response,  @RequestBody String json) {
        logger.info("signOut start, parameter:" + json);

        String result = CommonConstant.fail;

        Map<String, String> signOutInfo = writer.gson.fromJson(json, new TypeToken<Map<String, String>>(){}.getType());
        String sessionId =  signOutInfo.get(CommonConstant.sessionId);

        String username = (String)dao.getFromRedis(CommonConstant.sessionId + CommonConstant.underline + sessionId);
        if (username != null) {
            dao.deleteFromRedis(username);
            dao.deleteFromRedis(username + CommonConstant.underline + CommonConstant.resources);
            dao.deleteFromRedis(CommonConstant.salt + CommonConstant.underline + sessionId);
            signInUtil.removeUser(username);

            logger.info(username + "注销");

            result = CommonConstant.success;
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("signOut end");
    }

    /**
     * 处理重复登录
     */
    @RequestMapping(value="/user/hasLoginDeal")
    public void hasLoginDeal(HttpServletResponse response,  @RequestBody String json) {
        logger.info("hasLoginDeal start, parameter:" + json);

        String result = CommonConstant.fail;

        Map<String, String> dealInfo = writer.gson.fromJson(json, new TypeToken<Map<String, String>>(){}.getType());
        String username = dealInfo.get(CommonConstant.username);
        String sessionId = dealInfo.get(CommonConstant.sessionId);
        String oldSessionId = dealInfo.get(CommonConstant.oldSessionId);

        String tempUserKey = username + CommonConstant.underline +  oldSessionId;

        if (dealInfo.get("dealType").equals("againSignIn")) {
            User user = (User) dao.getFromRedis(tempUserKey);

            if (user != null) {
                //移除之前登录的用户
                dao.deleteFromRedis(CommonConstant.salt + CommonConstant.underline + oldSessionId);
                signInUtil.removeUser(username);

                dao.storeToRedis(username, user, signInUtil.sessionTime);
                signInUtil.setUser(sessionId, username);

                //移除临时登录用户
                dao.deleteFromRedis(tempUserKey);

                result = CommonConstant.success;
            }

        } else {
            result = "no operation";
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("hasLoginDeal end");
    }
}
