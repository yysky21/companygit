package com.hzg.finance;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.hzg.erp.ProductType;
import com.hzg.erp.Supplier;
import com.hzg.pay.Account;
import com.hzg.sys.*;
import com.hzg.tools.*;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletResponse;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Copyright © 2012-2025 云南红掌柜珠宝有限公司 版权所有
 * 文件名: FinanceController.java
 *
 * @author yuanyun
 * @version 1.00
 * @Date 2017/11/25
 */
@Controller
@RequestMapping("/finance")
public class ProvideFinanceController {

    Logger logger = Logger.getLogger(ProvideFinanceController.class);

    @Autowired
    private FinanceDao financeDao;

    @Autowired
    private FinanceService financeService;

    @Autowired
    private DateUtil dateUtil;

    @Autowired
    private Writer writer;

    @Autowired
    private Transcation transcation;

    /**
     * 保存实体
     * @param response
     * @param entity
     * @param json
     */
    @Transactional
    @PostMapping("/save")
    public void save(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("save start, parameter:" + entity + ":" + json);

        String result = CommonConstant.fail;
        Timestamp inputDate = dateUtil.getSecondCurrentTimestamp();

        try {
            if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
                Voucher voucher = writer.gson.fromJson(json, Voucher.class);
                // 保存凭证
                result += financeDao.save(voucher);
                // 保存凭证明细
                result += financeService.saveVoucherDetail(voucher);

                /**
                 * 提醒审核人员审核凭证
                 */
                String auditEntity = AuditFlowConstant.business_voucherAudit;
                result += financeService.launchAuditFlow(auditEntity, voucher.getId(), "请审核凭证编号为" +voucher.getNo()+"的凭证",
                        "请审核凭证编号为" +voucher.getNo()+"的凭证" ,voucher.getChartMaker());
            } else if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())){
                VoucherCategory voucherCategory = writer.gson.fromJson(json, VoucherCategory.class);
                voucherCategory.setInputDate(inputDate);
                result = financeDao.save(voucherCategory);

            } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
                Subject subject = writer.gson.fromJson(json, Subject.class);
                subject.setInputDate(inputDate);
                result = financeDao.save(subject);

            } else if (entity.equalsIgnoreCase(BankSubjectExtend.class.getSimpleName())){
                if (json.equals("[{}]")){
                    List<BankSubjectExtend> lists = financeDao.queryAll(BankSubjectExtend.class);
                    if (lists != null ) {
                        if (!lists.isEmpty()){
                            // 删除所有记录
                            result += financeDao.delAll(BankSubjectExtend.class);
                        } else {
                            // 不做处理
                            result += "fail,扩展设置数据不能为空，请输入值！";
                        }
                    } else {
                        // 不做处理
                        result += "fail,扩展设置数据不能为空，请输入值！";
                    }
                } else {
                    List<BankSubjectExtend> bankSubjectExtends = writer.gson.fromJson(json, new TypeToken<List<BankSubjectExtend>>() {
                    }.getType());
                    // 新增的第一条扩展的id
                    Integer id = 0;
                    for (int i = 0; i < bankSubjectExtends.size(); i++) {
                        result += financeDao.save(bankSubjectExtends.get(i));
                        if (i == 0 && transcation.dealResult(result) == CommonConstant.success) {
                            id = bankSubjectExtends.get(i).getId();
                        }
                    }
                    //查看之前是否有记录
                    List<BankSubjectExtend> lists = financeDao.queryPart(BankSubjectExtend.class, id);
                    if (lists != null && !lists.isEmpty() && transcation.dealResult(result) == CommonConstant.success) {
                        // 删除之前的所有记录
                        result += financeDao.delPart(BankSubjectExtend.class, id);
                    }
                }
            } else if (entity.equalsIgnoreCase(PurchaseSubjectExtend.class.getSimpleName())){
                if (json.equals("[{}]")){
                    List<PurchaseSubjectExtend> lists = financeDao.queryAll(PurchaseSubjectExtend.class);
                    if (lists != null ) {
                        if (!lists.isEmpty()){
                            // 删除所有记录
                            result += financeDao.delAll(PurchaseSubjectExtend.class);
                        } else {
                            // 不做处理
                            result += "fail,扩展设置数据不能为空，请输入值！";
                        }
                    } else {
                        // 不做处理
                        result += "fail,扩展设置数据不能为空，请输入值！";
                    }
                } else {
                    List<PurchaseSubjectExtend> purchaseSubjectExtends = writer.gson.fromJson(json, new TypeToken<List<PurchaseSubjectExtend>>() {
                    }.getType());
                    // 新增的第一条扩展的id
                    Integer id = 0;
                    for (int i = 0; i < purchaseSubjectExtends.size(); i++) {
                        result += financeDao.save(purchaseSubjectExtends.get(i));
                        if (i == 0 && transcation.dealResult(result) == CommonConstant.success) {
                            id = purchaseSubjectExtends.get(i).getId();
                        }
                    }
                    //查看之前是否有记录
                    List<PurchaseSubjectExtend> lists = financeDao.queryPart(PurchaseSubjectExtend.class, id);
                    if (lists != null && !lists.isEmpty() && transcation.dealResult(result) == CommonConstant.success) {
                        // 删除之前的所有记录
                        result += financeDao.delPart(PurchaseSubjectExtend.class, id);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            result += CommonConstant.fail;
        } finally {
            result = transcation.dealResult(result);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("save end, result:" + result);
    }

    @RequestMapping(value = "/query", method = {RequestMethod.GET, RequestMethod.POST})
    public void query(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("query start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
            Voucher voucher = writer.gson.fromJson(json, Voucher.class);
             List<Voucher> vouchers = financeDao.query(voucher);
            for (Voucher voucher1 : vouchers) {
                Set<VoucherDetail> voucherDetails = voucher1.getDetails();
                for (VoucherDetail voucherDetail : voucherDetails){
                    int id = voucherDetail.getVoucherItem().getId();
                    VoucherItem voucherItem = (VoucherItem) financeDao.queryById(id,VoucherItem.class);
                    voucherDetail.setVoucherItem(voucherItem);
                }
            }
            writer.writeObjectToJson(response, vouchers);
        } else if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())){
            VoucherCategory voucherCategory = writer.gson.fromJson(json, VoucherCategory.class);
            writer.writeObjectToJson(response, financeDao.query(voucherCategory));

        } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
            Subject subject = writer.gson.fromJson(json, Subject.class);
            writer.writeObjectToJson(response, financeDao.query(subject));

        } else if (entity.equalsIgnoreCase(SubjectCategory.class.getSimpleName())){
            SubjectCategory subjectCategory = writer.gson.fromJson(json, SubjectCategory.class);
            writer.writeObjectToJson(response, financeDao.query(subjectCategory));

        } else if (entity.equalsIgnoreCase(SubjectRelate.class.getSimpleName())){
            SubjectRelate subjectRelate = writer.gson.fromJson(json, SubjectRelate.class);
            writer.writeObjectToJson(response, financeDao.query(subjectRelate));

        }

        logger.info("query end");
    }

    @RequestMapping(value = "/queryDistinct", method = {RequestMethod.GET, RequestMethod.POST})
    public void queryDistinct(HttpServletResponse response, String entity){
        logger.info("queryDistinct start, parameter:" + entity);

        if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
            Subject subject = new Subject();
            List<Subject> subjects = financeDao.queryDistinct(subject);
            for (Subject subject1:subjects) {
                Integer idd = subject1.getSubjectCategory().getId();
                SubjectCategory subjectCategory = (SubjectCategory)financeDao.queryById(idd,SubjectCategory.class);
                subject1.setSubjectCategory(subjectCategory);
            }
            writer.writeObjectToJson(response, subjects);

        } else if (entity.equalsIgnoreCase(BankSubjectExtend.class.getSimpleName())){
            BankSubjectExtend bankSubjectExtend = new BankSubjectExtend();
            List<BankSubjectExtend> bankSubjectExtends = financeDao.queryDistinct(bankSubjectExtend);
            for (BankSubjectExtend bankSubjectExtend1:bankSubjectExtends) {
                Integer id1 = bankSubjectExtend1.getAccount().getId();
                Integer id2 = bankSubjectExtend1.getSubject().getId();
                Account account = (Account)financeDao.queryById(id1,Account.class);
                Subject subject = (Subject)financeDao.queryById(id2,Subject.class);
                bankSubjectExtend1.setAccount(account);
                bankSubjectExtend1.setSubject(subject);
            }
            writer.writeObjectToJson(response, bankSubjectExtends);

        } else if (entity.equalsIgnoreCase(PurchaseSubjectExtend.class.getSimpleName())){
            PurchaseSubjectExtend purchaseSubjectExtend = new PurchaseSubjectExtend();
            List<PurchaseSubjectExtend> purchaseSubjectExtends = financeDao.queryDistinct(purchaseSubjectExtend);
            for (PurchaseSubjectExtend purchaseSubjectExtend1:purchaseSubjectExtends) {
                Integer id1 = purchaseSubjectExtend1.getSupplier().getId();
                Integer id2 = purchaseSubjectExtend1.getSubject().getId();
                Supplier supplier = (Supplier) financeDao.queryById(id1,Supplier.class);
                Subject subject = (Subject)financeDao.queryById(id2,Subject.class);
                purchaseSubjectExtend1.setSupplier(supplier);
                purchaseSubjectExtend1.setSubject(subject);
            }
            writer.writeObjectToJson(response, purchaseSubjectExtends);
        }

        logger.info("queryDistinct end");
    }

    @RequestMapping(value = "/suggest", method = {RequestMethod.GET, RequestMethod.POST})
    public void suggest(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("suggest start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())) {
            VoucherCategory voucherCategory = writer.gson.fromJson(json, VoucherCategory.class);
            writer.writeObjectToJson(response, financeDao.suggest(voucherCategory, null));

        } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
            Subject subject = writer.gson.fromJson(json, Subject.class);
            writer.writeObjectToJson(response, financeDao.suggest(subject, null));

        } else if (entity.equalsIgnoreCase(Supplier.class.getSimpleName())){
            Supplier supplier = writer.gson.fromJson(json, Supplier.class);
            writer.writeObjectToJson(response, financeDao.suggest(supplier, null));

        }else if (entity.equalsIgnoreCase(User.class.getSimpleName())){
            User user = writer.gson.fromJson(json, User.class);
            writer.writeObjectToJson(response, financeDao.suggest(user, null));

        }else if (entity.equalsIgnoreCase(Account.class.getSimpleName())){
            Account account = writer.gson.fromJson(json, Account.class);
            writer.writeObjectToJson(response, financeDao.suggest(account, null));
        }
        logger.info("suggest end");
    }

    @RequestMapping(value = "/getNo", method = {RequestMethod.GET, RequestMethod.POST})
    public void obtainNo(HttpServletResponse response){
        logger.info("getNo start" );
        writer.writeStringToJson(response, "{\"" + FinanceConstant.no + "\":\"" + financeDao.getNo() + "\"}");
        logger.info("getNo end");
    }

    @RequestMapping(value = "/complexQuery", method = {RequestMethod.GET, RequestMethod.POST})
    public void complexQuery(HttpServletResponse response, String entity, @RequestBody String json, int position, int rowNum){
        logger.info("complexQuery start, parameter:" + entity + ":" + json + "," + position + "," + rowNum);

        Map<String, String> queryParameters = null;
        try {
            queryParameters = writer.gson.fromJson(json, new TypeToken<Map<String, String>>(){}.getType());
        } catch (Exception e){
            e.getMessage();
        }

        if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
            writer.writeObjectToJson(response, financeService.privateQuery(entity, json, position, rowNum));

        } else if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())) {
            List<VoucherCategory> voucherCategories = financeDao.complexQuery(VoucherCategory.class, queryParameters, position, rowNum);
            writer.writeObjectToJson(response, voucherCategories);

        } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())) {
            List<Subject> subjects = financeDao.complexQuery(Subject.class, queryParameters, position, rowNum);
            writer.writeObjectToJson(response, subjects);
        }

        logger.info("complexQuery end");
    }

    @RequestMapping(value = "/privateQuery", method = {RequestMethod.GET, RequestMethod.POST})
    public void privateQuery(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("privateQuery start, parameter:" + entity + ":" + json);

        if (entity.equalsIgnoreCase(Subject.class.getSimpleName())) {
            String flag  = "";

            if (financeDao.query(writer.gson.fromJson(json, Subject.class)) != null && !financeDao.query(writer.gson.fromJson(json, Subject.class)).isEmpty()) {
                flag = "true";
            } else {
                flag = "false";
            }
            String js = "{\"flag\":\"" + flag + "\"}";
            writer.writeStringToJson(response, js);
        }

        logger.info("query end");
    }

    /**
     * 查询条件限制下的记录数
     * @param response
     * @param entity
     * @param json
     */
    @RequestMapping(value = "/recordsSum", method = {RequestMethod.GET, RequestMethod.POST})
    public void recordsSum(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("recordsSum start, parameter:" + entity + ":" + json);
        BigInteger recordsSum = new BigInteger("-1");

        Map<String, String> queryParameters = null;
        try {
            queryParameters = writer.gson.fromJson(json, new TypeToken<Map<String, String>>() {}.getType());
        } catch (Exception e){
            e.getMessage();
        }

        if (entity.equalsIgnoreCase(Voucher.class.getSimpleName())) {
            recordsSum = financeService.privateRecordNum(entity, json);

        } else if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())){
            recordsSum =  financeDao.recordsSum(VoucherCategory.class, queryParameters);

        } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
            recordsSum =  financeDao.recordsSum(Subject.class, queryParameters);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.recordsSum + "\":" + recordsSum + "}");

        logger.info("recordsSum end");
    }

    @Transactional
    @PostMapping("/update")
    public void update(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("update start, parameter:" + entity + ":" + json);

        String result = CommonConstant.fail;

        try {
            if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())) {
                VoucherCategory voucherCategory = writer.gson.fromJson(json, VoucherCategory.class);
                result = financeDao.updateById(voucherCategory.getId(), voucherCategory);

            } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())){
                Subject subject = writer.gson.fromJson(json, Subject.class);
                result = financeDao.updateById(subject.getId(), subject);

            } else if (entity.equalsIgnoreCase(BankSubjectExtend.class.getSimpleName())) {
                Gson gson = new Gson();
                Map<String ,Object> map = gson.fromJson(json,Map.class);
                if (map.get("id") != null){

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            result += CommonConstant.fail;
        } finally {
            result = transcation.dealResult(result);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("update end, result:" + result);
    }

    @Transactional
    @RequestMapping(value = "/delete", method = {RequestMethod.GET, RequestMethod.POST})
    public void delete(HttpServletResponse response, String entity, @RequestBody String json){
        logger.info("delete start, parameter:" + entity + ":" + json);
        String result = CommonConstant.fail;

        try {
            if (entity.equalsIgnoreCase(VoucherCategory.class.getSimpleName())) {
                result = financeDao.delete(writer.gson.fromJson(json, VoucherCategory.class));

            } else if (entity.equalsIgnoreCase(Subject.class.getSimpleName())) {
                result = financeDao.delete(writer.gson.fromJson(json, Subject.class));
            }
        } catch (Exception e) {
            e.printStackTrace();
            result += CommonConstant.fail;
        } finally {
            result = transcation.dealResult(result);
        }

        writer.writeStringToJson(response, "{\"" + CommonConstant.result + "\":\"" + result + "\"}");
        logger.info("delete end");
    }

}
