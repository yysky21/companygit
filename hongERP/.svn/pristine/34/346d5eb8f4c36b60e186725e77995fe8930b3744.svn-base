/**
 * Copyright © 2012-2025 云南红掌柜珠宝有限公司 版权所有
 * 文件名: bookOrder.js.java
 *类的详细说明
 *
 * @author smjie
 * @Date  2017/9/5
 * @version 1.00
 */
var assistBook = (function ($) {
    "use strict";

    var contextPath = "";
    var accChooseHref;

    function init(tableId, rowCount, rootPath) {
        contextPath = rootPath;

        var trs = $("#" + tableId + " tbody tr");
        var trHtml = "<tr>" + $(trs[trs.length - 1]).html() + "</tr>";

        var tbodyHtml = "";
        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
            tbodyHtml += trHtml;
        }
        $("#" + tableId + " tbody").append(tbodyHtml);

        suggestProduct(null, '[data-property-name="productNo"]', contextPath);
        suggestPriceChange(null, '[data-property-name="priceChangeNo"]', contextPath);
        calculateAmountByQuantity(null, '[data-property-name="quantity"]');

        initAccs();
    }

    function addRow() {
        var trs = $("#productList tbody tr");
        $("#productList tbody").append("<tr>" + $(trs[trs.length - 1]).html() + "</tr>");
        trs = $("#productList tbody tr");

        $.each($(trs[trs.length-1]).find("input,a"), function (ci, item) {
            var propertyName = item.dataset.propertyName;
            if (propertyName != undefined) {

                if (propertyName == "productNo") {
                    suggestProduct($(item), '[data-property-name="productNo"]', contextPath);
                }

                if (propertyName == "priceChangeNo") {
                    suggestPriceChange($(item), '[data-property-name="priceChangeNo"]', contextPath);
                }

                if (propertyName == "quantity") {
                    calculateAmountByQuantity($(item), '[data-property-name="quantity"]');
                }

                if (propertyName == "chooseAccs") {
                    $(item).bind("click", function () {
                        accChooseHref = this;
                        $('#accChooseDiv').dialog('open');
                        return false;
                    });
                }
            }
        });
    }

    function suggestPriceChange(item, target, contextPath) {
        var suggestInputs = null;

        if (item != null) {
            suggestInputs = item;
        } else {
            suggestInputs = $(target);
        }

        try {
            if (suggestInputs != null) {
                suggestInputs.coolautosuggest({
                    url: contextPath + "/product/suggest/productPriceChange/no/",
                    showProperty: 'no',

                    onSelected: function (result) {
                        if (result != null) {
                            var inputs = this.parent().parent().find(":input");
                            var quantity, payAmount, priceChangePrice;

                            for (var x = 0; x < inputs.length; x++) {
                                var name = $(inputs[x]).attr("name");

                                if (name != undefined) {
                                    if (name == "details[][priceChange[price]]:number") {
                                        input[x].value = result.price;
                                        priceChangePrice = input[x];
                                    }

                                    if (name == "details[][priceChange[id]]:number") {
                                        input[x].value = result.id
                                    }

                                    if (name == "details[][quantity]:number") {
                                        quantity = input[x];
                                    }

                                    if (name == "details[][payAmount]:number") {
                                        payAmount = input[x];
                                    }
                                }
                            }

                            if ($.trim(quantity.value) != "") {
                                payAmount.value = Math.formatFloat(parseFloat(priceChangePrice.value) * parseFloat(quantity.value), 2);
                                calculateOrderAmount();
                            }
                        }
                    }
                });
            }
        } catch(e) {
            console.log(e.message);
        }
    }

    function suggestProduct(item, target, contextPath) {
        var suggestInputs = null;

        if (item != null) {
            suggestInputs = item;
        } else {
            suggestInputs = $(target);
        }

        try {
            if (suggestInputs != null) {
                suggestInputs.coolautosuggestm({
                    url: contextPath + "/erp/privateQuery/product",
                    showProperty: "no",

                    getQueryData: function(paramName){
                        var queryJson = {};

                        var suggestWord = $.trim(this.value);
                        if (suggestWord != "") {
                            queryJson["no"] = suggestWord;
                        }

                        return queryJson;
                    },

                    onSelected:function(result){
                        if(result!=null){
                            var inputs = this.parent().parent().find(":input");
                            var price, fatePrice, quantity, amount, payAmount, priceChangePrice;

                            for (var x = 0; x < inputs.length; x++) {
                                var name = $(inputs[x]).attr("name");

                                if (name != undefined) {
                                    if (name == "details[][product[id]]:number") {
                                        inputs[x].value = result.id;
                                    }

                                    if (name == "details[][product[name]]:string") {
                                        inputs[x].value = result.name;
                                    }

                                    if (name == "details[][product[price]]:number") {
                                        inputs[x].value = result.price;
                                        price = input[x];
                                    }

                                    if (name == "details[][product[fatePrice]]:number") {
                                        inputs[x].value = result.fatePrice;
                                        fatePrice = inputs[x];
                                    }

                                    if (name == "details[][quantity]:number") {
                                        quantity = input[x];
                                    }

                                    if (name == "details[][amount]:number") {
                                        amount = input[x];
                                    }

                                    if (name == "details[][payAmount]:number") {
                                        payAmount = input[x];
                                    }

                                    if (name == "details[][priceChange[price]]:number") {
                                        priceChangePrice = input[x];
                                    }
                                }
                            }

                            if ($.trim(quantity.value) != "") {
                                amount.value = Math.formatFloat(parseFloat(price.value) * parseFloat(quantity.value), 2);

                                if ($.trim(priceChangePrice.value) == "") {
                                    payAmount.value = Math.formatFloat(parseFloat(fatePrice.value) * parseFloat(quantity.value), 2);
                                }

                                calculateOrderAmount();
                            }
                        }
                    }
                });
            }
        } catch(e) {
            console.log(e.message);
        }
    }

    function calculateAmountByQuantity(item, target){
        var quantityInputs = null;

        if (item != null) {
            quantityInputs = item;
        } else {
            quantityInputs = $(target);
        }

        quantityInputs.blur(function(){
            var inputs = this.parent().parent().find(":input");
            var price, fatePrice, quantity, amount, payAmount, priceChangePrice;

            for (var x = 0; x < inputs.length; x++) {
                var name = $(inputs[x]).attr("name");

                if (name != undefined) {
                    if (name == "details[][product[price]]:number") {
                        price = input[x];
                    }

                    if (name == "details[][product[fatePrice]]:number") {
                        fatePrice = inputs[x];
                    }

                    if (name == "details[][priceChange[price]]:number") {
                        priceChangePrice = input[x];
                    }

                    if (name == "details[][quantity]:number") {
                        quantity = input[x];
                    }

                    if (name == "details[][amount]:number") {
                        amount = input[x];
                    }

                    if (name == "details[][payAmount]:number") {
                        payAmount = input[x];
                    }
                }
            }

            if ($.trim(quantity.value) != "") {
                if ($.trim(price.value) != "") {
                    amount.value = Math.formatFloat(parseFloat(price.value) * parseFloat(quantity.value), 2);
                }

                if ($.trim(priceChangePrice.value) != "") {
                    payAmount.value = Math.formatFloat(parseFloat(priceChangePrice.value) * parseFloat(quantity.value), 2);
                } else if ($.trim(fatePrice.value) != "") {
                   payAmount.value = Math.formatFloat(parseFloat(fatePrice.value) * parseFloat(quantity.value), 2);
                }

            } else {
                amount.value = 0;
                payAmount.value = 0;
            }

            calculateOrderAmount();
        });
    }

    function calculateOrderAmount() {
        var amount = 0, payAmount = 0;

        var trs = $("#productList tbody tr");

        $.each(trs, function(ci, tr){
            var price = "", fatePrice = "", quantity = "", priceChangePrice = "";

            $.each($(tr).find(":input"), function(cii, item){
                var name = $(item).attr("name");

                if (name != undefined) {
                    if (name == "details[][product[price]]:number") {
                        price = item.value;
                    }

                    if (name == "details[][product[fatePrice]]:number") {
                        fatePrice = item.value;
                    }

                    if (name == "details[][quantity]:number") {
                        quantity = item.value;
                    }

                    if (name == "details[][priceChange[price]]:number") {
                        priceChangePrice = item.value;
                    }
                }
            });

            if ($.trim(quantity) != "") {
                if ($.trim(price) != "") {
                    amount = Math.formatFloat(amount + parseFloat(price) * parseFloat(quantity), 2)
                }

                if ($.trim(priceChangePrice) != "") {
                    payAmount = Math.formatFloat(payAmount + parseFloat(priceChangePrice) * parseFloat(quantity), 2)
                } else if ($.trim(fatePrice) != "") {
                    payAmount = Math.formatFloat(payAmount + parseFloat(fatePrice) * parseFloat(quantity), 2)
                }
            }
        });

        $("#amount").val(amount);
        $("#payAmount").val(payAmount);
    }

    function initAccs() {
        var trs = $("#accList tbody tr");
        var trHtml = "<tr>" + $(trs[trs.length - 1]).html() + "</tr>";

        var tbodyHtml = "";
        for (var rowIndex = 0; rowIndex < 15; rowIndex++) {
            tbodyHtml += trHtml;
        }
        $("#accList tbody").append(tbodyHtml);

        $('[name="accName"]').coolautosuggestm({
            url:contextPath + "/erp/privateQuery/product",
            showProperty: 'name',

            getQueryData: function(paramName){
                var queryJson = {};

                var suggestWord = $.trim(this.value);
                if (suggestWord != "") {
                    queryJson["name"] = suggestWord;
                }
                queryJson["useType"] = "acc";

                return queryJson;
            },

            onSelected:function(result){
                if(result!=null){
                    $("#accId").val(result.id);
                }
            }
        });

        $("#accChooseDiv").dialog({
            title: "选择配饰",
            autoOpen: false,
            width: 900,
            height:510,
            buttons: {
                "添加": function () {
                    var accTd = $(accChooseHref).parent();

                    var accsInput = accTd.find('[data-accs-info="accs"]')[0];
                    var accs = accTd.find('[data-accs-info="accs"]')[0];

                    var trs = $("#accList tbody tr");

                    for (var i = 0; i < trs.length; i++) {
                        var tds = $(trs[i]).find("td");

                        if (tds.length > 0) {
                            var accName = (trs[i]).find('[name="accName"]')[0].value;

                            if ($.trim(accName) != "") {
                                var accQuantity = $(trs[i]).find('[name="accQuantity"]')[0].value;
                                var accUnit = $(trs[i]).find('[name="accUnit"]')[0].value;

                                accs.append('<input type="hidden" value="' + $(trs[i]).find('[name="accId"]')[0].value + '" name="details[][orderPrivate[accs[][product[id]]]]:number">' +
                                    '<input type="hidden" value="' + accQuantity + '" name="details[][orderPrivate[accs[][quantity]]]:number">' +
                                    '<input type="hidden" value="' + accUnit + '" name="details[][orderPrivate[accs[][unit]]]:string">');


                                accsInput.value = accName + " " + accQuantity + " " + accUnit + ";" +  accsInput.value;
                            }
                        }
                    }

                    $(this).dialog("close");
                },

                "取消": function () {
                    $(this).dialog("close");
                }
            }
        });

        $('[data-property-name="chooseAccs"]').bind("click", function () {
            accChooseHref = this;
            $("#accChooseDiv").dialog("open");
            return false;
        });
    }

    function saveOrder(uri){
        var $form = $("#form");
        if (!validator.checkAll($form)) {
            return;
        }

        var json = JSON.stringify($form.serializeJSON());
        json = json.substring(0, json.length-1) + ',"details":[';


        var trs = $("#productList tbody tr");

        for (var i = 0; i < trs.length; i++) {
            var textInputs = $(trs[i]).find("input");
            var tds = $(trs[i]).find("td");

            if (tds.length > 0) {
                if ($.trim($(trs[i]).find('[data-property-name="productNo"]')[0].value) != "") {

                    for (var j = 0; j < textInputs.length; j++) {
                        if ($.trim(textInputs[j].value) == "" && $(textInputs[j]).attr("required") != undefined) {
                            alert("请输入值");
                            $(textInputs[j]).focus();

                            return false;
                        }

                        var type = $("#type").val();
                        if ($.trim(textInputs[j].value) == "" && $(textInputs[j]).attr("name") == "details[][orderPrivate[describes]]:string") {
                            if (type == 2) {
                                alert("请输入商品加工描述信息");
                            } else if (type == 4) {
                                alert("请输入私人订制描述信息");
                            }
                            $(textInputs[j]).focus();

                            return false;
                        }

                        if ($.trim(textInputs[j].value) == "" && $(textInputs[j]).attr("name") == "details[][orderPrivate[accs[][productQuantityUnit]]]:string" && type == 4) {
                            alert("私人订制，请选择配饰");
                            return false;
                        }
                    }

                    json += JSON.stringify($(trs[i]).find(":input").not('[value=""]').serializeJSON()["details"][0]) + ",";
                }
            }
        }

        if (json.substring(json.length-1) == "[") {
            alert("请输入订购商品明细");
            return false;

        } else {
            json = json.substring(0, json.length-1) + ']}';
        }

        $form.sendData(uri, json, function(result){
            if (result.orderNo != undefined) {
                alert("订单保存成功,订单号:" + result.orderNo);
            } else {
                alert("订单保存失败:" + result.result);
            }
        });
    }

    return {
        init: init,
        addRow: addRow,
        saveOrder: saveOrder
    }
})(jQuery);
